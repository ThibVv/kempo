name: üîÑ Auto-merge Feature to Dev

on:
  workflow_run:
    workflows: ["SonarCloud Quality Gate"]
    types: [completed]
    branches:
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-merge-to-dev:
    name: üîÑ Auto-merge to Dev
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: üîç Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üìä Get Branch Info
        id: branch_info
        run: |
          BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "pr_title=Auto-merge: $BRANCH_NAME ‚Üí dev" >> $GITHUB_OUTPUT
          echo "pr_body=ü§ñ **Automatic merge from feature branch**

          **Source Branch:** \`$BRANCH_NAME\`
          **Target Branch:** \`dev\`
          **Triggered by:** SonarCloud Quality Gate success
          
          ‚úÖ **Validations passed:**
          - Feature branch tests
          - SonarCloud quality gate
          - Code quality checks
          
          This PR was automatically created after all quality checks passed." >> $GITHUB_OUTPUT

      - name: üîÑ Create Pull Request to Dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.branch_info.outputs.branch_name }}"
          PR_TITLE="${{ steps.branch_info.outputs.pr_title }}"
          
          # Cr√©er la PR avec curl (API GitHub)
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "{
              \"title\": \"$PR_TITLE\",
              \"head\": \"$BRANCH_NAME\",
              \"base\": \"dev\",
              \"body\": \"ü§ñ **Automatic merge from feature branch**\n\n**Source Branch:** \`$BRANCH_NAME\`\n**Target Branch:** \`dev\`\n**Triggered by:** SonarCloud Quality Gate success\n\n‚úÖ **Validations passed:**\n- Feature branch tests\n- SonarCloud quality gate\n- Code quality checks\n\nThis PR was automatically created after all quality checks passed.\"
            }"
          
      - name: üéØ Auto-approve and Merge PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.branch_info.outputs.branch_name }}"
          
          # Attendre que la PR soit cr√©√©e
          sleep 10
          
          # R√©cup√©rer le num√©ro de la PR
          PR_NUMBER=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:$BRANCH_NAME&base=dev" \
            | jq -r '.[0].number')
          
          if [ "$PR_NUMBER" != "null" ] && [ -n "$PR_NUMBER" ]; then
            echo "üîç Found PR #$PR_NUMBER"
            
            # Auto-approuver la PR
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews" \
              -d '{"event": "APPROVE", "body": "‚úÖ Auto-approved after successful SonarCloud validation"}'
            
            # Merger la PR
            curl -X PUT \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge" \
              -d '{"commit_title": "Auto-merge: '"$BRANCH_NAME"' ‚Üí dev", "merge_method": "squash"}'
            
            echo "‚úÖ PR #$PR_NUMBER merged successfully"
          else
            echo "‚ùå No PR found for branch $BRANCH_NAME"
            exit 1
          fi

      - name: üßπ Cleanup Feature Branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Supprimer la branche feature apr√®s merge r√©ussi
          git push origin --delete "${{ steps.branch_info.outputs.branch_name }}"
          echo "üóëÔ∏è Feature branch ${{ steps.branch_info.outputs.branch_name }} deleted"

      - name: üì¢ Success Notification
        run: |
          echo "üéâ **Auto-merge completed successfully!**"
          echo "‚úÖ Feature branch merged to dev"
          echo "üóëÔ∏è Feature branch cleaned up"
          echo "üöÄ Ready for next development cycle"
