name: üîÑ Auto-Merge to Dev

on:
  workflow_run:
    workflows: ["üöÄ CI Feature Branch"]
    types:
      - completed
    branches:
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
      - 'refactor/**'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
  COVERAGE_THRESHOLD: ${{ secrets.COVERAGE_THRESHOLD }}
  AUTO_MERGE_ENABLED: ${{ secrets.AUTO_MERGE_ENABLED }}

jobs:
  auto-merge:
    name: üîÑ Auto-Merge to Dev
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: üîç Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch }}
          
      - name: üìä Check SonarCloud Quality Gate
        id: sonarcloud_check
        run: |
          echo "üîç Checking SonarCloud Quality Gate..."
          
          # Attendre que SonarCloud termine son analyse
          sleep 30
          
          # V√©rifier le statut du Quality Gate via l'API SonarCloud
          SONAR_STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=ThibVv_kempo" \
            | jq -r '.projectStatus.status')
          
          echo "SonarCloud Quality Gate Status: $SONAR_STATUS"
          
          if [ "$SONAR_STATUS" = "OK" ]; then
            echo "‚úÖ SonarCloud Quality Gate: PASSED"
            echo "quality_gate_passed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå SonarCloud Quality Gate: FAILED"
            echo "quality_gate_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: üìà Check Code Coverage
        id: coverage_check
        run: |
          echo "üìà Checking Code Coverage..."
          
          # V√©rifier la couverture backend
          BACKEND_COVERAGE=0
          if [ -f "backend/coverage/coverage-summary.json" ]; then
            BACKEND_COVERAGE=$(cat backend/coverage/coverage-summary.json | jq -r '.total.lines.pct')
          fi
          
          # V√©rifier la couverture frontend
          FRONTEND_COVERAGE=0
          if [ -f "front/coverage/coverage-summary.json" ]; then
            FRONTEND_COVERAGE=$(cat front/coverage/coverage-summary.json | jq -r '.total.lines.pct')
          fi
          
          # Calculer la couverture moyenne
          AVERAGE_COVERAGE=$(echo "scale=2; ($BACKEND_COVERAGE + $FRONTEND_COVERAGE) / 2" | bc)
          
          echo "Backend Coverage: $BACKEND_COVERAGE%"
          echo "Frontend Coverage: $FRONTEND_COVERAGE%"
          echo "Average Coverage: $AVERAGE_COVERAGE%"
          echo "Required Threshold: $COVERAGE_THRESHOLD%"
          
          if (( $(echo "$AVERAGE_COVERAGE >= $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "‚úÖ Code Coverage: PASSED ($AVERAGE_COVERAGE% >= $COVERAGE_THRESHOLD%)"
            echo "coverage_passed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Code Coverage: FAILED ($AVERAGE_COVERAGE% < $COVERAGE_THRESHOLD%)"
            echo "coverage_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: üè∑Ô∏è Check Manual Validation Label
        id: label_check
        run: |
          echo "üè∑Ô∏è Checking for manual validation label..."
          
          # V√©rifier si la branche ou le commit a le label "module"
          # Pour simplifier, on check si "module" est dans le nom de la branche
          BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          
          if [[ "$BRANCH_NAME" == *"module"* ]]; then
            echo "‚è∏Ô∏è Manual validation required (module detected in branch name)"
            echo "manual_validation_required=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No manual validation required"
            echo "manual_validation_required=false" >> $GITHUB_OUTPUT
          fi
          
      - name: üîÑ Create Pull Request to Dev
        id: create_pr
        if: steps.label_check.outputs.manual_validation_required == 'false'
        run: |
          echo "üîÑ Creating Pull Request to dev..."
          
          SOURCE_BRANCH="${{ github.event.workflow_run.head_branch }}"
          TARGET_BRANCH="dev"
          
          # Cr√©er la Pull Request
          PR_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls" \
            -d "{
              \"title\": \"üöÄ Auto-merge: $SOURCE_BRANCH to $TARGET_BRANCH\",
              \"head\": \"$SOURCE_BRANCH\",
              \"base\": \"$TARGET_BRANCH\",
              \"body\": \"## ü§ñ Automated Pull Request\n\n‚úÖ **SonarCloud Quality Gate:** PASSED\n‚úÖ **Code Coverage:** $(echo '${{ steps.coverage_check.outputs.coverage_passed }}' | sed 's/true/PASSED/g')\n‚úÖ **All CI Checks:** PASSED\n\n**Auto-generated by CI/CD Pipeline**\n\n---\n\n### üìä Validation Results\n- SonarCloud: ${{ steps.sonarcloud_check.outputs.quality_gate_passed }}\n- Coverage: ${{ steps.coverage_check.outputs.coverage_passed }}\n- Manual Review: Not required\n\n### üîÑ Next Steps\n- This PR will be auto-merged if all status checks pass\n- Dev branch will trigger staging deployment\",
              \"draft\": false
            }")
          
          PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.number')
          
          if [ "$PR_NUMBER" != "null" ]; then
            echo "‚úÖ Pull Request #$PR_NUMBER created successfully"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to create Pull Request"
            echo "$PR_RESPONSE" | jq -r '.message'
            exit 1
          fi
          
      - name: ‚è≥ Wait for Status Checks
        if: steps.create_pr.outputs.pr_number != ''
        run: |
          echo "‚è≥ Waiting for status checks to complete..."
          
          PR_NUMBER="${{ steps.create_pr.outputs.pr_number }}"
          MAX_WAIT=300  # 5 minutes
          WAIT_TIME=0
          
          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            # V√©rifier le statut des checks
            CHECK_STATUS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" \
              | jq -r '.mergeable_state')
            
            echo "Current mergeable state: $CHECK_STATUS"
            
            if [ "$CHECK_STATUS" = "clean" ]; then
              echo "‚úÖ All status checks passed!"
              break
            elif [ "$CHECK_STATUS" = "blocked" ]; then
              echo "‚ùå Status checks failed or blocked"
              exit 1
            fi
            
            sleep 30
            WAIT_TIME=$((WAIT_TIME + 30))
          done
          
          if [ $WAIT_TIME -ge $MAX_WAIT ]; then
            echo "‚è∞ Timeout waiting for status checks"
            exit 1
          fi
          
      - name: üîÄ Auto-Merge Pull Request
        if: steps.create_pr.outputs.pr_number != ''
        run: |
          echo "üîÄ Auto-merging Pull Request..."
          
          PR_NUMBER="${{ steps.create_pr.outputs.pr_number }}"
          
          # Merger la Pull Request
          MERGE_RESPONSE=$(curl -s -X PUT \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge" \
            -d "{
              \"commit_title\": \"üöÄ Auto-merge: ${{ github.event.workflow_run.head_branch }} to dev\",
              \"commit_message\": \"Automated merge after successful CI/CD validation\n\n‚úÖ SonarCloud Quality Gate: PASSED\n‚úÖ Code Coverage: ‚â• $COVERAGE_THRESHOLD%\n‚úÖ All CI Checks: PASSED\",
              \"merge_method\": \"squash\"
            }")
          
          MERGE_STATUS=$(echo "$MERGE_RESPONSE" | jq -r '.merged')
          
          if [ "$MERGE_STATUS" = "true" ]; then
            echo "‚úÖ Pull Request merged successfully!"
            echo "üéâ ${{ github.event.workflow_run.head_branch }} has been merged to dev"
          else
            echo "‚ùå Failed to merge Pull Request"
            echo "$MERGE_RESPONSE" | jq -r '.message'
            exit 1
          fi
          
      - name: üìß Send Success Notification
        if: success()
        run: |
          echo "üìß Sending success notification..."
          
          # Ici on peut ajouter l'envoi d'email via une action ou un service
          echo "‚úÖ Auto-merge completed successfully!"
          echo "üìß Notification would be sent to: $NOTIFICATION_EMAIL"
          echo "üéâ Branch ${{ github.event.workflow_run.head_branch }} merged to dev"
          
      - name: üìß Send Failure Notification
        if: failure()
        run: |
          echo "üìß Sending failure notification..."
          
          # Ici on peut ajouter l'envoi d'email via une action ou un service
          echo "‚ùå Auto-merge failed!"
          echo "üìß Notification would be sent to: $NOTIFICATION_EMAIL"
          echo "üîç Please check the logs and resolve the issue manually"
          
      - name: üìã Summary
        if: always()
        run: |
          echo "## üîÑ Auto-Merge Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| SonarCloud Quality Gate | ${{ steps.sonarcloud_check.outputs.quality_gate_passed == 'true' && '‚úÖ PASSED' || '‚ùå FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Coverage | ${{ steps.coverage_check.outputs.coverage_passed == 'true' && '‚úÖ PASSED' || '‚ùå FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Manual Validation | ${{ steps.label_check.outputs.manual_validation_required == 'true' && '‚è∏Ô∏è REQUIRED' || '‚úÖ NOT REQUIRED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Pull Request | ${{ steps.create_pr.outputs.pr_number != '' && '‚úÖ CREATED' || '‚ùå FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.event.workflow_run.head_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** dev" >> $GITHUB_STEP_SUMMARY
          echo "**Notification:** $NOTIFICATION_EMAIL" >> $GITHUB_STEP_SUMMARY
